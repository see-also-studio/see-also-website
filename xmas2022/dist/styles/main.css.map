{"version":3,"file":"styles/main.css","mappings":"AAAA,2ZCMA,QAaC,UACA,SACA,eACA,aACA,wBACA,+EAID,aAEC,MAGD,aACC,OAGD,eAEC,cAGD,WAEC,qDAGD,UAIC,aACA,OAGD,wBACC,iBACA,MAID,qBACE,oBAGF,kBAGE,MAIF,sBACE,MAGF,gBACE,6BACA,mCACA,kCACA,KAIF,cACE,YACA,cACA,IAIF,iBACE,8BASF,YAIE,cACA,QAIF,WACE,gBACA,UACA,eACA,gCAEA,YAEE,mBAGF,uBACE,0CACA,ODvHJ,mDACE,4BACA,gCACA,MAGF,8BACE,yBACA,8BACA,kIAEE,MAIJ,YACE,2BACA,iBACA,gBACA,WACA,iBACA,mBACA,uBACA,QACA,6BEoJA,KF7JF,qBAYI,MACA,SAIJ,oBACE,qBACA,uBAEA,eACA,MACA,OACA,WACA,YACA,WACA,YACA,aAEA,sBACA,QACA,mBACA,uBACA,iBAEA,mBACE,aACA,YAGF,iCACE,kCACA,mBACA,kBACA,wDACA,+BAEA,gBACE,sCACA,yBACA,yBAGF,gBACE,qCACA,oBACA,yBAGF,eACE,kBACA,yBAGF,gBACE,iBACA,yBAGF,cACE,kBACA,UAKN,iBACE,WACA,kBACA,iBAEA,YACE,sBACA,yBACA,cACA,mBACA,yBACA,qBACA,gBACA,kBAGF,iBACE,6BACA,aACA,8BACA,YACA,0BAEA,eACE,kBACA,6BAKF,cACE,mBAIJ,YACE,YACA,cACA,2BAEA,mBACE,yBACA,WACA,cACA,mBAIJ,YACE,YACA,YACA,mBACA,4BACA,uBACA,kBACA,cACA,2BAEA,mBACE,yBACA,WACA,cACA,sBAGF,iBACE,iBAKJ,YACE,YAEA,YACA,sBAEA,mBACA,6BACA,uBAEA,cACE,cACA,sBAGF,wBACE,0BACA,gBAIJ,yBACE,yCAGE,iBACE,mEAIJ,YAEE,gCAGF,YACE,OAKN,iBACE,WACA,eACA,cAEA,YACE,sBACA,WACA,mBACA,yBACA,gBAGF,WACE,yBACA,0BACA,YACA,cAGF,YACE,iBACA,6BACA,sBACA,eACA,0BACA,aAGF,wBACE,0BACA,YACA,mFACA,2EACA,aAIJ,cACE,MACA,OACA,WACA,YACA,eACA,WACA,0BAEA,2BACE,OAIJ,4CACE,kBACA,qBACA,aACA,aACA,aACA,iBACA,iBACA,iBACA,WAEA,YACA,kCACA,kBACA,gBACA,gCACA,kBACA,iNAIA,eAKA,UACE,cACA,WACA,YACA,kCACA,+BACA,qCACA,uBACA,6BACA,oBAGF,GACE,MACE,KAGF,SACE,MAGF,MACE,qBAIJ,GACE,KACE,KAGF,QACE,MAGF,KACE,oBAKN,GACE,8CACE,KAGF,6CACE,MAGF,8CACE,SAIJ,cACE,SACA,YACA,aACA,eAEA,aACE,mBAEA,0BACE,cAIJ,YACE,SACA,QACA,UAIJ,cACE,yBACA,kBACA,cACA,mBACA,MACA,OACA,wBACA,UACA,cACA,kBACA,aAEA,uBACA,mBACA,KAGF,cACE,GAGF,UACE,C","sources":["webpack://see-also-christmas-2022/./src/styles/main.scss","webpack://see-also-christmas-2022/./src/styles/inc/_reset.scss","webpack://see-also-christmas-2022/./node_modules/sass-mq/_mq.scss"],"sourcesContent":["@use \"inc/reset\";\n\n@use \"mq\";\n\n:root {\n  --font-family: 'Courier New', monospace, sans-serif;\n  --font-family--serif: serif;\n  --font-family--sans: sans-serif;\n}\n\nbody {\n  font-family: var(--font-family);\n  background-color: #d7d5d0;\n  background-size: 6.25em 6.25em;\n  background-image: \n    linear-gradient(to right, #58935c 1px, transparent 1px),\n    linear-gradient(to bottom, #58935c 1px, transparent 1px);\n}\n\nmain {\n  display: flex;\n  flex-direction: row-reverse;\n  flex-wrap: nowrap;\n  overflow: hidden;\n  width: 100%;\n  min-height: 100vh;\n  align-items: center;\n  justify-content: center;\n  gap: 6em;\n\n  @include mq.mq($until: 690px) {\n    flex-direction: column;\n    gap: 0;\n  }\n}\n\n.intro {\n  --color--fg: #04690e;\n  --color--bg: #e4e3e2;\n\n  color: var(--color--fg);\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 90;\n  padding: 1em;\n\n  display: flex;\n  flex-direction: column;\n  gap: 2em;\n  align-items: center;\n  justify-content: center;\n\n  &.inactive {\n    pointer-events: none;\n    display: none;\n  }\n  \n  > div {\n    background-color: var(--color--bg);\n    border: 2px solid var(--color--fg);\n    border-radius: 10em;\n    width: max-content;\n    box-shadow: 0.625rem 0.625rem 0.6875rem rgba(250, 34, 34, 0.15);\n\n    &:not(:nth-child(3)) {\n      font-size: 8.75em;\n      font-family: var(--font-family--serif);\n      padding: 0.19em 0.4em 0.15em;\n    }\n\n    &:nth-child(3) {\n      font-size: 3.75em;\n      font-family: var(--font-family--sans);\n      padding: 0.375em 0.9em;\n    }\n\n    &:nth-child(1) {\n      margin-left: 10%;\n      margin-right: auto;\n    }\n\n    &:nth-child(2) {\n      margin-left: auto;\n      margin-right: 10%;\n    }\n\n    &:nth-child(3) {\n      margin-left: 5%;\n      margin-right: auto;\n    }\n  }\n}\n\n.message {\n  position: relative;\n  z-index: 50;\n  margin-bottom: 5em;\n\n  &__inner {\n    display: flex;\n    flex-direction: column;\n    background-color: #D3D0CA;\n    width: 30.37em;\n    min-height: 21.87em;\n    transform: rotate(0.5deg);\n    border-radius: 1.25em;\n    overflow: hidden;\n  }\n\n  &__header {\n    position: relative;\n    border-bottom: 1px solid #000;\n    display: flex;\n    justify-content: space-between;\n    padding: 1em;\n\n    &::before {\n      content: \"❆ ❆ ❆\";\n      font-size: 1.375em;\n    }\n  }\n\n  &__recipient {\n    &::before {\n      content: \"FOA \";\n    }\n  }\n\n  &__heading {\n    display: flex;\n    padding: 1em;\n    color: #F40B0B;\n\n    &::before {\n      content: \"Subject: \";\n      text-transform: uppercase;\n      color: #000;\n      min-width: 6em;\n    }\n  }\n\n  &__content {\n    display: flex;\n    flex-grow: 1;\n    padding: 1em;\n    padding-bottom: 2em;\n    transition-property: opacity;\n    transition-duration: 1s;\n    position: relative;\n    color: #F40B0B;\n\n    &::before {\n      content: \"Message: \";\n      text-transform: uppercase;\n      color: #000;\n      min-width: 6em;\n    }\n\n    br {\n      margin-bottom: 1em;\n    }\n    \n  }\n\n  &__front {\n    display: none;\n\n    flex-grow: 1;\n    padding: 1em;\n\n    flex-direction: column;\n    align-items: center;\n    justify-content: space-around;\n\n    &-stars {\n      font-size: 10em;\n      color: #1E6904;\n    }\n\n    &-text {\n      text-transform: uppercase;\n      text-decoration: underline;\n    }\n  }\n\n  &.click {\n    cursor: pointer !important;\n\n    .message__header {\n      &::before {\n        visibility: hidden;\n      }\n    }\n\n    .message__content, \n    .message__heading {\n      display: none;\n    }\n\n    .message__front {\n      display: flex;\n    }\n  }\n}\n\n.info {\n  position: relative;\n  z-index: 50;\n  margin-top: 5em;\n\n  &__inner {\n    display: flex;\n    flex-direction: column;\n    width: 20em;\n    min-height: 20.87em;\n    transform: rotate(3.5deg);\n  }\n\n  &__content {\n    flex-grow: 1;\n    background-color: #D6D4E0;\n    outline: 3px solid #D6D4E0;\n    padding: 1em;\n  }\n\n  &__holes {\n    display: flex;\n    flex-wrap: nowrap;\n    justify-content: space-evenly;\n    align-content: stretch;\n    min-height: 3em;\n    outline: 3px solid #D6D4E0;\n  }\n\n  &__hole {\n    background-color: #D6D4E0;\n    outline: 3px solid #D6D4E0;\n    flex-grow: 1;\n    -webkit-mask-image: radial-gradient(.9em at 50% 1.5em,transparent 95%,#000 100%);\n    mask-image: radial-gradient(.9em at 50% 1.5em,transparent 95%,#000 100%)\n  }\n}\n\n.background {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  cursor: pointer;\n  z-index: 10;\n\n  &.paused .ball {\n    animation-play-state: paused;\n  }\n}\n\n.ball {\n  --mask-image: '../../images/patterns/05.svg';\n  --color--fg: #fff;\n  --color--bg: #04680f;\n  --delayX: 0s;\n  --delayY: 0s;\n  --delayR: 0s;\n  --durationX: 40s;\n  --durationY: 40s;\n  --durationR: 20s;\n\n  width: 10em;\n  height: 10em;\n  background-color: var(--color--bg);\n  border-radius: 50%;\n  overflow: hidden;\n  transform: translate(-50%, -50%);\n  position: absolute;\n\n  /* @keyframes duration | easing-function | delay |\niteration-count | direction | fill-mode | play-state | name */\n  animation: var(--durationX) linear var(--delayX) infinite alternate bounceX,\n  var(--durationY) linear var(--delayY) infinite alternate bounceY, \n  var(--durationR) ease-in-out var(--delayR) infinite alternate rotate;\n\n\n  &::before {\n    content: \"\";\n    display: block;\n    width: 100%;\n    height: 100%;\n    background-color: var(--color--fg);\n    -webkit-mask: no-repeat 50% 50%;\n    -webkit-mask-image: var(--mask-image);\n    mask: no-repeat 50% 50%;\n    mask-image: var(--mask-image);\n  }\n\n  @keyframes bounceX {\n    0% {\n      left: 0;\n    }\n\n    50% {\n      left: 100%;\n    }\n\n    100% {\n      left: 0;\n    }\n  }\n\n  @keyframes bounceY {\n    0% {\n      top: 0;\n    }\n\n    50% {\n      top: 100%;\n    }\n\n    100% {\n      top: 0;\n    }\n  }\n}\n\n@keyframes rotate {\n  0% {\n    transform: translate(-50%, -50%) rotate(-15deg);\n  }\n\n  50% {\n    transform: translate(-50%, -50%) rotate(15deg);\n  }\n\n  100% {\n    transform: translate(-50%, -50%) rotate(-15deg);\n  }\n}\n\n.audio {\n  position: fixed;\n  top: 0.7em;\n  right: 1.6em;\n  z-index: 9999;\n\n  button {\n    width: 3.92rem;\n\n    img {\n      transform: rotate(53.06deg);\n    }\n  }\n\n  audio {\n    display: none;\n    height: 0;\n    width: 0;\n  }\n}\n\n.sticker {\n  position: fixed;\n  background-color: #CCBEA1;\n  border-radius: 50%;\n  width: 18.25em;\n  min-height: 10.15em;\n  top: 0;\n  left: 0;\n  transform: rotate(19deg);\n  z-index: 5;\n  padding: 0 3em;\n  text-align: center;\n\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\np + p {\n  margin-top: 1em;\n}\n\na {\n  color: #000;\n}\n","/* stylelint-disable */\n/* http://meyerweb.com/eric/tools/css/reset/\n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\n\nbody {\n\tline-height: 1;\n}\n\nol,\nul {\n\tlist-style: none;\n}\n\nblockquote,\nq {\n\tquotes: none;\n}\n\nblockquote:before,\nblockquote:after,\nq:before,\nq:after {\n\tcontent: '';\n\tcontent: none;\n}\n\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* Box sizing rules */\nhtml {\n  box-sizing: border-box;\n}\n\n*,\n*:before,\n*:after {\n  box-sizing: inherit;\n}\n\n/* Set core body defaults */\nhtml {\n  scroll-behavior: smooth;\n}\n\nbody {\n  min-height: 100vh;\n  text-rendering: optimizeSpeed;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n/* Make images easier to work with */\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n}\n\n/* Italic font style */\nem {\n  font-style: italic;\n}\n\n/* Natural flow and rhythm in articles by default */\n// main *:not(br) + *:not(br) {\n//   margin-top: calc(var(--line-height) * 1em);\n// }\n\n/* Inherit fonts for inputs and buttons */\ninput,\nbutton,\ntextarea,\nselect {\n  font: inherit;\n  color: inherit;\n}\n\n/* Reset buttons */\nbutton {\n  border: none;\n  background: none;\n  padding: 0;\n  cursor: pointer;\n\n  &:focus,\n  span:focus {\n    outline: none;\n  }\n\n  &:focus > span {\n    outline: dotted #000 1px;\n    outline: -webkit-focus-ring-color auto 1px;\n  }\n}\n","@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$breakpoints: (\n  mobile: 320px,\n  tablet: 740px,\n  desktop: 980px,\n  wide: 1300px,\n) !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   @use 'path/to/mq' with ($show-breakpoints: ('mobile', 'tablet', 'desktop'));\n///\n///\n/// @type map\n$show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// If you want to overried the media type, you can use this option.\n/// @example scss\n///   @use 'path/to/mq' with ($media-type: 'screen');\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and example\n$media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n///\n/// @example scss\n///  $font-size-in-ems: px2em(16px);\n///  p { font-size: px2em(16px); }\n///\n/// @returns {Number}\n\n@function px2em($px) {\n  @if math.is-unitless($px) {\n    @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n    @return px2em($px * 1px);\n  }\n  // if $px is compatible with em units, then return value unchanged\n  @if math.compatible($px, 1em) {\n    @return $px;\n  }\n  @return math.div($px, 16px) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $breakpoints\n///\n/// @example scss\n///  $tablet-width: get-breakpoint-width(tablet);\n///  @media (min-width: get-breakpoint-width(tablet)) {}\n///\n/// @requires {Variable} $breakpoints\n///\n/// @returns {Number} Value in pixels\n@function get-breakpoint-width($name, $breakpoints: $breakpoints) {\n  @if map.has-key($breakpoints, $name) {\n    @return map.get($breakpoints, $name);\n  } @else {\n    @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    @return null;\n  }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $breakpoints\n/// @param {String | Boolean} $until [false] - One of $breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$breakpoints]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $media-type\n/// @requires {Variable} $breakpoints\n/// @requires {function} px2em\n/// @requires {function} get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  @use 'path/to/mq' as *;\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n  $from: false,\n  $until: false,\n  $and: false,\n  $media-type: $media-type,\n  $breakpoints: $breakpoints\n) {\n  $min-width: 0;\n  $max-width: 0;\n  $media-query: '';\n\n  // From: this breakpoint (inclusive)\n  @if $from {\n    @if type-of($from) == number {\n      $min-width: px2em($from);\n    } @else {\n      $min-width: px2em(get-breakpoint-width($from, $breakpoints));\n    }\n  }\n\n  // Until: that breakpoint (exclusive)\n  @if $until {\n    @if type-of($until) == number {\n      $max-width: px2em($until);\n    } @else {\n      $max-width: px2em(get-breakpoint-width($until, $breakpoints)) - 0.01em;\n    }\n  }\n\n  @if $min-width != 0 {\n    $media-query: '#{$media-query} and (min-width: #{$min-width})';\n  }\n  @if $max-width != 0 {\n    $media-query: '#{$media-query} and (max-width: #{$max-width})';\n  }\n  @if $and {\n    $media-query: '#{$media-query} and #{$and}';\n  }\n\n  // Remove unnecessary media query prefix 'all and '\n  @if ($media-type == 'all' and $media-query != '') {\n    $media-type: '';\n    $media-query: str-slice(unquote($media-query), 6);\n  }\n\n  @media #{$media-type + $media-query} {\n    @content;\n  }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _quick-sort($list) {\n  $less: ();\n  $equal: ();\n  $large: ();\n\n  @if length($list) > 1 {\n    $seed: list.nth($list, math.ceil(math.div(length($list), 2)));\n\n    @each $item in $list {\n      @if ($item == $seed) {\n        $equal: list.append($equal, $item);\n      } @else if ($item < $seed) {\n        $less: list.append($less, $item);\n      } @else if ($item > $seed) {\n        $large: list.append($large, $item);\n      }\n    }\n\n    @return join(join(_quick-sort($less), $equal), _quick-sort($large));\n  }\n\n  @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _map-sort-by-value($map) {\n  $map-sorted: ();\n  $map-keys: map.keys($map);\n  $map-values: map.values($map);\n  $map-values-sorted: _quick-sort($map-values);\n\n  // Reorder key/value pairs based on key values\n  @each $value in $map-values-sorted {\n    $index: index($map-values, $value);\n    $key: list.nth($map-keys, $index);\n    $map-sorted: map.merge(\n      $map-sorted,\n      (\n        $key: $value,\n      )\n    );\n\n    // Unset the value in $map-values to prevent the loop\n    // from finding the same index twice\n    $map-values: list.set-nth($map-values, $index, 0);\n  }\n\n  @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $breakpoints\n///\n/// @example scss\n///  @include add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin add-breakpoint($name, $width) {\n  $new-breakpoint: (\n    $name: $width,\n  );\n  $breakpoints: map.merge($breakpoints, $new-breakpoint) !global;\n  $breakpoints: _map-sort-by-value($breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $breakpoints\n/// @requires {Variable} $show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin show-breakpoints(\n  $show-breakpoints: $show-breakpoints,\n  $breakpoints: $breakpoints\n) {\n  body:before {\n    background-color: #fcf8e3;\n    border-bottom: 1px solid #fbeed5;\n    border-left: 1px solid #fbeed5;\n    color: #c09853;\n    font: small-caption;\n    padding: 3px 6px;\n    pointer-events: none;\n    position: fixed;\n    right: 0;\n    top: 0;\n    z-index: 100;\n\n    // Loop through the breakpoints that should be shown\n    @each $show-breakpoint in $show-breakpoints {\n      $width: get-breakpoint-width($show-breakpoint, $breakpoints);\n      @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n        content: '#{$show-breakpoint} ≥ #{$width} (#{px2em($width)})';\n      }\n    }\n  }\n}\n\n@if list.length($show-breakpoints) > 0 {\n  @include show-breakpoints;\n}\n"],"names":[],"sourceRoot":""}